public static void addSlashCommand() {
        numberOfCommands = 0;
        commands.clear();
        commandTypes.clear();
        commandInstances.clear();
        commandsJson = JsonNodeFactory.instance.objectNode();
        final ArrayNode commandsArray = JsonNodeFactory.instance.arrayNode();
        final Reflections reflections = new Reflections(SlashCommandExtender.class.getPackage().getName());
        final Set<Class<? extends SlashCommandExtender>> annotated =
                reflections.getSubTypesOf(SlashCommandExtender.class);

        for (final Class<?> command : annotated) {
            try {
                final SlashCommandExtender newSlashCommand =
                        (SlashCommandExtender) command.getConstructor().newInstance();
                final String[] packageName = command.getPackage().getName().split("\\.");
                final CommandType commandType =
                        CommandType.getCommandType(packageName[packageName.length - 1]);
                newSlashCommand.setCommandType(commandType != CommandType.UNKNOWN ? commandType
                        : newSlashCommand.getCommandType());
                SlashCommandData data = newSlashCommand.getSlashCommandData();

                final ObjectNode commandJson = JsonNodeFactory.instance.objectNode()
                    .put("name", data.getName())
                    .put("description", data.getDescription())
                    .put("permissions", Json.userPermsToJson(newSlashCommand.getUserPerms()))
                    .set("options", Json.slashCommandOptionsToJson(data.getOptions()));

                final ArrayNode subcommandJson = JsonNodeFactory.instance.arrayNode();
                for (SubcommandData subcommandData : data.getSubcommands()) {
                    final ObjectNode subcommandDataJson = JsonNodeFactory.instance.objectNode()
                        .put("name", subcommandData.getName())
                        .put("description", subcommandData.getDescription());
                    subcommandDataJson.set("options",
                            Json.slashCommandOptionsToJson(subcommandData.getOptions()));
                    subcommandJson.add(subcommandDataJson);
                }
                commandJson.set("subcommands", subcommandJson);
                commandsArray.add(commandJson);
            } catch (Exception e) {
                logger.error("Failed to add command {}", command.getName(), e);
            }

            commandsJson.set("commands", commandsArray);
        }
    }