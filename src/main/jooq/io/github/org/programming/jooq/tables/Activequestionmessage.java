/*
 * This file is generated by jOOQ.
 */
package io.github.org.programming.jooq.tables;


import io.github.org.programming.jooq.Public;
import io.github.org.programming.jooq.tables.records.ActivequestionmessageRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Activequestionmessage extends TableImpl<ActivequestionmessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.activequestionmessage</code>
     */
    public static final Activequestionmessage ACTIVEQUESTIONMESSAGE = new Activequestionmessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivequestionmessageRecord> getRecordType() {
        return ActivequestionmessageRecord.class;
    }

    /**
     * The column <code>public.activequestionmessage.guild_id</code>.
     */
    public final TableField<ActivequestionmessageRecord, String> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.activequestionmessage.message_id</code>.
     */
    public final TableField<ActivequestionmessageRecord, String> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Activequestionmessage(Name alias, Table<ActivequestionmessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Activequestionmessage(Name alias, Table<ActivequestionmessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.activequestionmessage</code> table
     * reference
     */
    public Activequestionmessage(String alias) {
        this(DSL.name(alias), ACTIVEQUESTIONMESSAGE);
    }

    /**
     * Create an aliased <code>public.activequestionmessage</code> table
     * reference
     */
    public Activequestionmessage(Name alias) {
        this(alias, ACTIVEQUESTIONMESSAGE);
    }

    /**
     * Create a <code>public.activequestionmessage</code> table reference
     */
    public Activequestionmessage() {
        this(DSL.name("activequestionmessage"), null);
    }

    public <O extends Record> Activequestionmessage(Table<O> child, ForeignKey<O, ActivequestionmessageRecord> key) {
        super(child, key, ACTIVEQUESTIONMESSAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Activequestionmessage as(String alias) {
        return new Activequestionmessage(DSL.name(alias), this);
    }

    @Override
    public Activequestionmessage as(Name alias) {
        return new Activequestionmessage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Activequestionmessage rename(String name) {
        return new Activequestionmessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activequestionmessage rename(Name name) {
        return new Activequestionmessage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
