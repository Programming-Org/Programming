/*
 * This file is generated by jOOQ.
 */
package io.github.org.programming.jooq.tables;


import io.github.org.programming.jooq.Public;
import io.github.org.programming.jooq.tables.records.AskthreadRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.Instant;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Askthread extends TableImpl<AskthreadRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.askthread</code>
     */
    public static final Askthread ASKTHREAD = new Askthread();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AskthreadRecord> getRecordType() {
        return AskthreadRecord.class;
    }

    /**
     * The column <code>public.askthread.member_id</code>.
     */
    public final TableField<AskthreadRecord, String> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.askthread.guild_id</code>.
     */
    public final TableField<AskthreadRecord, String> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.askthread.amount</code>.
     */
    public final TableField<AskthreadRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.askthread.time_stamp</code>.
     */
    public final TableField<AskthreadRecord, Instant> TIME_STAMP = createField(DSL.name("time_stamp"), SQLDataType.INSTANT.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.INSTANT)), this, "");

    private Askthread(Name alias, Table<AskthreadRecord> aliased) {
        this(alias, aliased, null);
    }

    private Askthread(Name alias, Table<AskthreadRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.askthread</code> table reference
     */
    public Askthread(String alias) {
        this(DSL.name(alias), ASKTHREAD);
    }

    /**
     * Create an aliased <code>public.askthread</code> table reference
     */
    public Askthread(Name alias) {
        this(alias, ASKTHREAD);
    }

    /**
     * Create a <code>public.askthread</code> table reference
     */
    public Askthread() {
        this(DSL.name("askthread"), null);
    }

    public <O extends Record> Askthread(Table<O> child, ForeignKey<O, AskthreadRecord> key) {
        super(child, key, ASKTHREAD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Askthread as(String alias) {
        return new Askthread(DSL.name(alias), this);
    }

    @Override
    public Askthread as(Name alias) {
        return new Askthread(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Askthread rename(String name) {
        return new Askthread(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Askthread rename(Name name) {
        return new Askthread(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Integer, Instant> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
