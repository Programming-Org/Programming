/*
 * This file is generated by jOOQ.
 */
package io.github.org.programming.jooq.tables;


import io.github.org.programming.jooq.Keys;
import io.github.org.programming.jooq.Public;
import io.github.org.programming.jooq.tables.records.ModerationRecord;

import java.time.Instant;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Moderation extends TableImpl<ModerationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.moderation</code>
     */
    public static final Moderation MODERATION = new Moderation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModerationRecord> getRecordType() {
        return ModerationRecord.class;
    }

    /**
     * The column <code>public.moderation.id</code>.
     */
    public final TableField<ModerationRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.moderation.guild_id</code>.
     */
    public final TableField<ModerationRecord, String> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.moderation.user_id</code>.
     */
    public final TableField<ModerationRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.moderation.moderator_id</code>.
     */
    public final TableField<ModerationRecord, String> MODERATOR_ID = createField(DSL.name("moderator_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.moderation.time_stamp</code>.
     */
    public final TableField<ModerationRecord, Instant> TIME_STAMP = createField(DSL.name("time_stamp"), SQLDataType.INSTANT.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.INSTANT)), this, "");

    /**
     * The column <code>public.moderation.amount_of_warnings</code>.
     */
    public final TableField<ModerationRecord, Integer> AMOUNT_OF_WARNINGS = createField(DSL.name("amount_of_warnings"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.moderation.reason</code>.
     */
    public final TableField<ModerationRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.moderation.type</code>.
     */
    public final TableField<ModerationRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Moderation(Name alias, Table<ModerationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Moderation(Name alias, Table<ModerationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.moderation</code> table reference
     */
    public Moderation(String alias) {
        this(DSL.name(alias), MODERATION);
    }

    /**
     * Create an aliased <code>public.moderation</code> table reference
     */
    public Moderation(Name alias) {
        this(alias, MODERATION);
    }

    /**
     * Create a <code>public.moderation</code> table reference
     */
    public Moderation() {
        this(DSL.name("moderation"), null);
    }

    public <O extends Record> Moderation(Table<O> child, ForeignKey<O, ModerationRecord> key) {
        super(child, key, MODERATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ModerationRecord, Integer> getIdentity() {
        return (Identity<ModerationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ModerationRecord> getPrimaryKey() {
        return Keys.MODERATION_PKEY;
    }

    @Override
    public Moderation as(String alias) {
        return new Moderation(DSL.name(alias), this);
    }

    @Override
    public Moderation as(Name alias) {
        return new Moderation(alias, this);
    }

    @Override
    public Moderation as(Table<?> alias) {
        return new Moderation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Moderation rename(String name) {
        return new Moderation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Moderation rename(Name name) {
        return new Moderation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Moderation rename(Table<?> name) {
        return new Moderation(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, Instant, Integer, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super String, ? super String, ? super String, ? super Instant, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super String, ? super String, ? super String, ? super Instant, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
