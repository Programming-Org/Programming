/*
 * Copyright 2022 Programming Org and other Programming Org contributors
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import nu.studer.gradle.jooq.JooqEdition

buildscript {
    dependencies {
        classpath 'org.postgresql:postgresql:42.4.2'
    }
}

plugins {
    id 'java'
    id "com.diffplug.spotless" version "6.8.0"
    id "application"
    id "nu.studer.jooq" version "7.1.1"
}

group 'io.github.org.programming'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

compileJava.options.encoding = "UTF-8"

sourceCompatibility = 17
targetCompatibility = 17

dependencies {
    implementation group: 'net.dv8tion', name: 'JDA', version: '5.0.0-alpha.17'
    //Logger
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.11'
    //implementation group: 'uk.org.lidalia', name: 'sysout-over-slf4j', version: '1.0.2'
    //config
    implementation group: 'io.github.yusufsdiscordbot', name: 'config', version: '1.0.4'
    //database
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '5.0.1'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.4.2'
    //jooq
    implementation group: 'org.jooq', name: 'jooq', version: '3.17.3'
    implementation group: 'org.jooq', name: 'jooq-codegen', version: '3.17.3'
    implementation group: 'org.jooq', name: 'jooq-meta', version: '3.17.3'
    //test
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    //jooq
    jooqGenerator 'org.postgresql:postgresql:42.4.2'
}

apply plugin: 'jacoco' // code coverage reports

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

configurations.all {
    //noinspection GrUnresolvedAccess
    // ez vulnerability fix
    exclude group: "org.slf4j", module: "slf4j-log4j12"
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
    }
    jacocoTestReport.dependsOn test
    jacocoTestCoverageVerification.dependsOn jacocoTestReport
}

mainClassName = "io.github.org.programming.Bot"

compileJava {
    // Makes spotlessApply task run on every compile/build.
    dependsOn 'spotlessApply'

    // Nails the Java-Version of every Subproject
    sourceCompatibility = rootProject.sourceCompatibility
    targetCompatibility = rootProject.targetCompatibility
}


spotless {
    java {
        // Excludes build folder since it may contain compiled classes
        targetExclude("build/**")
        //No need to do spotless on generated code
        targetExclude("src/main/jooq/**")
        eclipse('4.21.0').configFile("${rootProject.rootDir}/meta/formatting/google-style-eclipse.xml")

        licenseHeader("""/*
 * Copyright 2022 Programming Org and other Programming Org contributors
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ """)

    }
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO
    }

    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

jar {
    archiveVersion.set("")
}


def props = new Properties()
//if the file exists, load the properties
if (file(".env").exists()) {
    file(".env").withInputStream { props.load(it) }
}

//create the build directory so no errors happen with the workflow
task createBuildDir {
    doLast {
        logger.info("===== Creating build directory =====")
        file("build").mkdirs()
        logger.info("===== Build directory created ======")
    }

    mustRunAfter(project.tasks.findByPath('clean'))
}


jooq {
    version = '3.15.2'
    edition = JooqEdition.OSS
    configurations {
        main {
            generateSchemaSourceOnCompilation = false
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = props.getProperty("DB_URL", "null")
                    user = props.getProperty("DB_USER", "null")
                    password = props.getProperty("DB_PASSWORD", "null")
                }
                generator {
                    name = 'org.jooq.codegen.JavaGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        includes = '.*'
                        excludes = ''

                        forcedTypes {
                            forcedType {
                                name = 'INSTANT'
                                includeTypes = 'TIMESTAMP'
                            }

                            forcedType {
                                name = 'INTERVALDAYTOSECOND'
                                includeTypes = 'INTERVAL'
                            }
                        }
                    }
                    generate {
                        records = true
                        immutablePojos = true
                        fluentSetters = true

                    }
                    target {
                        packageName = 'io.github.org.programming.jooq'
                        directory = "src/main/jooq"
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }
    }
}